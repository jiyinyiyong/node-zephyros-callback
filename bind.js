// Generated by CoffeeScript 1.6.3
var call, delay, handle_message, id, net, str, unit,
  __slice = [].slice;

net = require('net');

unit = function(x) {
  return x + '\n';
};

str = function(x) {
  switch (typeof x) {
    case 'object':
      return JSON.stringify(x);
    case 'string':
      return x;
    default:
      return String(x);
  }
};

delay = function(t, f) {
  return setTimeout(f, t);
};

id = {
  current: 0,
  make: function() {
    this.current += 1;
    return this.current;
  }
};

call = [];

exports.connect = function(options, onconnect) {
  var client;
  client = net.connect(options, onconnect);
  exports.send = function() {
    var args, callback, message, method, msg_id, receiver_id, _i, _ref;
    receiver_id = arguments[0], method = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), callback = arguments[_i++];
    if ((typeof callback) !== 'function') {
      args.push(callback);
    }
    msg_id = id.make();
    message = [msg_id, receiver_id, method].concat(__slice.call(args));
    client.write(unit(str(message)));
    if ((_ref = message[2]) !== 'unbind' && _ref !== 'unlisten') {
      return call[msg_id] = {
        callback: callback,
        message: message
      };
    }
  };
  return client.on('data', function(message) {
    message = message.toString();
    if (message.indexOf('\n') >= 0) {
      return message.split('\n').map(handle_message);
    } else {
      return handle_message(message);
    }
  });
};

handle_message = function(message) {
  var msg_id, task, value, _ref, _ref1;
  if (message.toString().trim().length > 0) {
    _ref = JSON.parse(message), msg_id = _ref[0], value = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    task = call[msg_id];
    if (task != null) {
      if ((_ref1 = task.message[2]) === 'bind' || _ref1 === 'listen') {
        if (task.ready != null) {
          task.callback.apply(task, value);
        }
        return task.ready = true;
      } else {
        if (typeof task.callback === "function") {
          task.callback.apply(task, value);
        }
        return delete call[msg_id];
      }
    } else {
      return console.log('no callback for', message.toString(), call);
    }
  }
};

["bind", "unbind", "listen", "unlisten", "relaunch_config", "clipboard_contents", "focused_window", "visible_windows", "all_windows", "main_screen", "all_screens", "running_apps", "alert", "log", "show_box", "hide_box", "choose_from", "update_settings", "undo", "redo"].map(function(method) {
  return exports[method] = function() {
    var args, callback, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    if ((typeof callback) !== 'function') {
      args.push(callback);
    }
    return exports.send.apply(exports, [null, method].concat(__slice.call(args), [callback]));
  };
});

["window_created", "window_minimized", "window_unminimized", "window_moved", "window_resized", "app_launched", "focus_changed", "app_died", "app_hidden", "app_shown", "screens_changed", "mouse_moved", "modifiers_changed"].map(function(method) {
  return exports[method] = function() {
    var args, callback, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    if ((typeof callback) !== 'function') {
      args.push(callback);
    }
    return exports.listen.apply(exports, [method].concat(__slice.call(args), [callback]));
  };
});

/*
//@ sourceMappingURL=bind.map
*/
